{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/mk-mac-171/MyProject/ranking-movie/components/ScrollContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\n\nvar ScrollContainer = function ScrollContainer(_ref) {\n  var loading = _ref.loading,\n      children = _ref.children,\n      contentContainerStyle = _ref.contentContainerStyle,\n      refreshFn = _ref.refreshFn;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var onRefresh = function onRefresh() {\n    return _regeneratorRuntime.async(function onRefresh$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setRefreshing(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(refreshFn());\n\n          case 3:\n            setRefreshing(false);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      onRefresh: onRefresh,\n      refreshing: refreshing,\n      enabled: false,\n      tintColor: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }),\n    style: {\n      backgroundColor: \"black\"\n    },\n    contentContainerStyle: _objectSpread({\n      flex: loading ? 1 : 0,\n      justifyContent: loading ? \"center\" : \"flex-start\"\n    }, contentContainerStyle),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(ActivityIndicator, {\n    color: \"white\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 18\n    }\n  }) : children);\n};\n\nScrollContainer.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  contentContainerStyle: PropTypes.object,\n  refreshFn: PropTypes.func\n};\nexport default ScrollContainer;","map":{"version":3,"sources":["/Users/mk-mac-171/MyProject/ranking-movie/components/ScrollContainer.js"],"names":["React","useState","PropTypes","ScrollContainer","loading","children","contentContainerStyle","refreshFn","refreshing","setRefreshing","onRefresh","backgroundColor","flex","justifyContent","propTypes","bool","isRequired","node","object","func"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAKlB;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,qBAEI,QAFJA,qBAEI;AAAA,MADJC,SACI,QADJA,SACI;;AAAA,kBACgCN,QAAQ,CAAC,KAAD,CADxC;AAAA;AAAA,MACGO,UADH;AAAA,MACeC,aADf;;AAEJ,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAChBD,YAAAA,aAAa,CAAC,IAAD,CAAb;AADgB;AAAA,6CAEVF,SAAS,EAFC;;AAAA;AAGhBE,YAAAA,aAAa,CAAC,KAAD,CAAb;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKA,SACE,oBAAC,UAAD;AACE,IAAA,cAAc,EACZ,oBAAC,cAAD;AACE,MAAA,SAAS,EAAEC,SADb;AAEE,MAAA,UAAU,EAAEF,UAFd;AAGE,MAAA,OAAO,EAAE,KAHX;AAIE,MAAA,SAAS,EAAE,OAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AASE,IAAA,KAAK,EAAE;AAAEG,MAAAA,eAAe,EAAE;AAAnB,KATT;AAUE,IAAA,qBAAqB;AACnBC,MAAAA,IAAI,EAAER,OAAO,GAAG,CAAH,GAAO,CADD;AAEnBS,MAAAA,cAAc,EAAET,OAAO,GAAG,QAAH,GAAc;AAFlB,OAGhBE,qBAHgB,CAVvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGF,OAAO,GAAG,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,OAAzB;AAAiC,IAAA,IAAI,EAAC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAsDC,QAhBhE,CADF;AAoBD,CAhCD;;AAkCAF,eAAe,CAACW,SAAhB,GAA4B;AAC1BV,EAAAA,OAAO,EAAEF,SAAS,CAACa,IAAV,CAAeC,UADE;AAE1BX,EAAAA,QAAQ,EAAEH,SAAS,CAACe,IAAV,CAAeD,UAFC;AAG1BV,EAAAA,qBAAqB,EAAEJ,SAAS,CAACgB,MAHP;AAI1BX,EAAAA,SAAS,EAAEL,SAAS,CAACiB;AAJK,CAA5B;AAOA,eAAehB,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ScrollView, ActivityIndicator, RefreshControl } from \"react-native\";\n\nconst ScrollContainer = ({\n  loading,\n  children,\n  contentContainerStyle,\n  refreshFn\n}) => {\n  const [refreshing, setRefreshing] = useState(false);\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await refreshFn();\n    setRefreshing(false);\n  };\n  return (\n    <ScrollView\n      refreshControl={\n        <RefreshControl\n          onRefresh={onRefresh}\n          refreshing={refreshing}\n          enabled={false}\n          tintColor={\"white\"}\n        />\n      }\n      style={{ backgroundColor: \"black\" }}\n      contentContainerStyle={{\n        flex: loading ? 1 : 0,\n        justifyContent: loading ? \"center\" : \"flex-start\",\n        ...contentContainerStyle\n      }}\n    >\n      {loading ? <ActivityIndicator color=\"white\" size=\"small\" /> : children}\n    </ScrollView>\n  );\n};\n\nScrollContainer.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  contentContainerStyle: PropTypes.object,\n  refreshFn: PropTypes.func\n};\n\nexport default ScrollContainer;\n"]},"metadata":{},"sourceType":"module"}